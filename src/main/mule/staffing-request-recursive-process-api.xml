<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">
	<http:listener-config name="HTTP_Listener_config" doc:name="HTTP Listener config" doc:id="2c64f96b-7dca-4855-bd34-d4dbb1634a91" >
		<http:listener-connection host="0.0.0.0" port="${http.port}" />
	</http:listener-config>
	<configuration-properties doc:name="Configuration properties" doc:id="2ef7ea47-0e4e-45d0-a78e-363437914573" file="mule-artifact.properties" />
	<flow name="staffing-request-recursive-process-apiFlow" doc:id="15c70107-7f33-4e2b-bfb2-90f4f47952f7" >
		<http:listener doc:name="Listener" doc:id="2848743b-7eb3-43c0-928c-9f5906940cf3" config-ref="HTTP_Listener_config" path="/staffing/recursive"/>
		<logger level="INFO" doc:name="Logger" doc:id="6dfce078-195e-4eb2-8973-31f578452c01" message="#[payload]"/>
		<scatter-gather doc:name="Scatter-Gather" doc:id="d21834db-d1c7-4d80-89ab-6e45174ff67c" >
			<route >
				<set-variable value="#[[]]" doc:name="allRequests" doc:id="2f3a47a0-590f-418c-b77b-70a905fdf55d" variableName="allRequests" />
				<flow-ref doc:name="requests-subFlow" doc:id="39b86d01-8f34-453b-a41b-2bebc9f5d6e3" name="requests-subFlow" />
				<logger level="INFO" doc:name="Logger" doc:id="6f1d1a12-2108-4867-b4c8-dba74efc44fd" message='#["Total Requests Received --- " ++ payload.TotalRequestsRetrieved]'/>
				<flow-ref doc:name="Retrieve Staffing Data from Requests" doc:id="5dfb8a59-ae74-485f-9e36-d5787dd776fe" name="requests-reverse-subFlow"/>
			</route>
			<route >
				<set-variable value="#[[]]" doc:name="allVacancies" doc:id="98fcdfd8-2ee1-4a49-bca9-0f09f7dabcc5" variableName="allVacancies"/>
				<flow-ref doc:name="vacancies-subFlow" doc:id="bdceb661-881d-4128-888d-1f61f375880b" name="vacancies-subFlow"/>
				<logger level="INFO" doc:name="Logger" doc:id="4c41945c-4f4a-4255-9511-b97f516f94a7" message='#["Total Vacancies Retrieved --- " ++ payload.TotalVacanciesRetrieved]'/>
				<flow-ref doc:name="Retrieve Staffing Data from Vacancies" doc:id="8a472a7f-ebda-46f0-836a-fdbcbafd5904" name="vacancies-reverse-subFlow"/>
			</route>
			<route >
				<set-variable value="#[[]]" doc:name="allAnnouncements" doc:id="48b81ac4-401d-4f29-be75-79008c6417ea" variableName="allAnnouncements"/>
				<flow-ref doc:name="announcements-subFlow" doc:id="4343ef6d-1c4b-4d87-b30b-0ce519cc7da4" name="announcements-subFlow"/>
				<logger level="INFO" doc:name="Logger" doc:id="e5a1f6f0-ee43-42ed-be2d-f412d3dbc08b" message='#["Total Announcements Retreived --- " ++ sizeOf(flatten(vars.allAnnouncements))]'/>
				<flow-ref doc:name="Retrieve Staffing Data from Announcements" doc:id="645c75ad-bf20-49c7-8a6e-a25ae8071813" name="announcements-reverse-subFlow"/>
			</route>
			<route >
				<logger level="INFO" doc:name="Logger" doc:id="fe6facf9-e3b9-4c1c-ac3c-3e297433d3c3" message="Dummy route!!!"/>
			</route>
			<route >
				<set-variable value="#[[]]" doc:name="allOffices" doc:id="29e81809-c2ce-4a0d-b23c-38431db76b61" variableName="allOffices"/>
				<flow-ref doc:name="offices-subFlow" doc:id="85ddf03e-33ec-4eb4-923a-1383b31981f8" name="offices-subFlow"/>
			</route>
			<route >
				<set-variable value="#[[]]" doc:name="allCustomers" doc:id="a5c364ac-372c-42f9-bd34-e04ade5f0196" variableName="allCustomers"/>
				<flow-ref doc:name="customers-subFlow" doc:id="0d151738-c3c2-4d56-bd7d-e88407f799c6" name="customers-subFlow"/>
			</route>
		</scatter-gather>
		<ee:transform doc:name="Transform Message" doc:id="97a64fdc-9749-41a7-ae21-299a5108d530">
					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
vars.fullAnnouncementsPayload
/*{
	//(vars.fullRequestsPayload),
	//(vars.fullVacanciesPayload),
	(vars.fullAnnouncementsPayload)
}*/
]]></ee:set-payload>
					</ee:message>
				</ee:transform>
	</flow>
	<sub-flow name="requests-subFlow" doc:id="1b9b5715-e428-4f88-b199-8836bc9e9045" >
		<choice doc:name="Choice" doc:id="ebfa9fa1-4ff1-4ce9-9f2d-a21b0877a141" >
			<when expression='#[!isEmpty(payload) and !isEmpty(payload."paging"."next")]'>
				<set-variable value="#[output text/plain --- p('staffing.api.base.url') ++ payload.&quot;paging&quot;.&quot;next&quot;]" doc:name="requestURL" doc:id="8f1f5cfd-555d-4412-a710-b916bd33bc3e" variableName="requestURL"/>
			</when>
			<otherwise >
				<set-variable value="#[p('staffing.api.base.url') ++ &quot;/api/requests?pageSize=&quot; ++ p('staffing.requests.page.size')]" doc:name="requestURL" doc:id="00d71508-f06c-454e-b321-4a36bf197cd9" variableName="requestURL"/>
			</otherwise>
		</choice>
		<http:request method="GET" doc:name="Retrieve Staffing Requests" doc:id="7957fa20-44e4-4b4e-94b2-0d7becbdb51d" url="#[vars.requestURL]" targetValue="#[output application/json --- payload]">
			<http:headers><![CDATA[#[output application/java
---
{
	"Api-Key" : p('staffing.api.key')
}]]]></http:headers>
		</http:request>
		<choice doc:name="Choice" doc:id="ada6a226-fc5f-4b4f-8ddc-cc1a86df5375" >
			<when expression="#[(sizeOf((payload.&quot;data&quot; map (item, index) -&gt; {&#10;    &quot;ModifiedTime&quot;: item.dwLastModifiedDateTime&#10;} filterObject (((now() - item.dwLastModifiedDateTime) as Number { unit: &quot;hours&quot; }) &lt;= p('time.period.hrs'))) filter ($ != {}))) &gt;= p('staffing.requests.page.size')]">
				<ee:transform doc:name="Transform Message" doc:id="3eb05b59-159e-4345-ad82-5840b6a78636" >
					<ee:message >
					</ee:message>
					<ee:variables >
						<ee:set-variable variableName="currentStaffingRequest" ><![CDATA[%dw 2.0
output application/json
---
payload."data" map (item, index) -> {
	"requestNumber": item.requestNumber,
	"requestStatus": item.requestStatus,
	"requestType": item.requestType,
	"requestSource": item.requestSource,
	"bargainingUnitPositionFlag": item.bargainingUnitPositionFlag,
	"requesterEmail": item.requesterEmail,
	"requesterName": item.requesterName,
	"approverEmail": item.approverEmail,
	"approverName": item.approverName,
	"approvalDateTime": item.approvalDateTime,
	"creationDateTime": item.creationDateTime,
	"hiringValidationDate": item.hiringValidationDate,
	"personnelActionDate": item.personnelActionDate,
	"submissionDateTime": item.submissionDateTime,
	"lastModifiedDateTime": item.lastModifiedDateTime,
	"cancellationDate": item.cancellationDate,
	"requestPositionDescriptionsLink": (item."_links" filter((value, index) -> value.rel == "RequestPositionDescriptions"))[0],
	"staffingTasksLink": (item."_links" filter ((value, index) -> value.rel == "StaffingTasks"))[0] 
}]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
				<set-variable value="#[output application/json --- vars.allRequests + vars.currentStaffingRequest]" doc:name="allRequests" doc:id="4de89c6c-7074-4d4c-86f3-7da1018d9fd4" variableName="allRequests"/>
				<flow-ref doc:name="Flow Reference" doc:id="b4606b60-fe01-4f86-a5f4-af7b2a1853cc" name="requests-subFlow"/>
			</when>
			<otherwise >
				<ee:transform doc:name="Transform Message" doc:id="1f3d1c40-7288-4e04-9b4c-847fe79e0275" >
					<ee:message >
					</ee:message>
					<ee:variables >
						<ee:set-variable variableName="currentStaffingRequest" ><![CDATA[%dw 2.0
output application/json
---
(payload."data" map (item, index) -> {
	"requestNumber": item.requestNumber,
	"requestStatus": item.requestStatus,
	"requestType": item.requestType,
	"requestSource": item.requestSource,
	"bargainingUnitPositionFlag": item.bargainingUnitPositionFlag,
	"requesterEmail": item.requesterEmail,
	"requesterName": item.requesterName,
	"approverEmail": item.approverEmail,
	"approverName": item.approverName,
	"approvalDateTime": item.approvalDateTime,
	"creationDateTime": item.creationDateTime,
	"hiringValidationDate": item.hiringValidationDate,
	"personnelActionDate": item.personnelActionDate,
	"submissionDateTime": item.submissionDateTime,
	"lastModifiedDateTime": item.lastModifiedDateTime,
	"cancellationDate": item.cancellationDate,
	"requestPositionDescriptionsLink": (item."_links" filter((value, index) -> value.rel == "RequestPositionDescriptions"))[0],
	"staffingTasksLink": (item."_links" filter ((value, index) -> value.rel == "StaffingTasks"))[0] 
} filterObject (((now() - item.dwLastModifiedDateTime) as Number { unit: "hours" }) <= p('time.period.hrs'))) filter ($ != {})

]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
				<set-variable value="#[output application/json --- vars.allRequests + vars.currentStaffingRequest]" doc:name="allRequests" doc:id="0bca3ba8-4de3-4f3c-ad3e-7c17c04dfd83" variableName="allRequests"/>
			</otherwise>
		</choice>
		<ee:transform doc:name="Transform Message" doc:id="70d2969b-980b-46ae-ae99-c0557d7acd46" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	"TotalRequestsRetrieved": sizeOf(flatten(vars.allRequests))
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</sub-flow>
	<sub-flow name="requests-reverse-subFlow" doc:id="dfb086f6-3129-49ef-bcba-901ff9c3f6b4" >
		<set-variable value="#[output application/json --- []]" doc:name="fullRequestsPayload" doc:id="56e17805-f800-4b01-bb47-19281f4cff9a" variableName="fullRequestsPayload"/>
		<parallel-foreach doc:name="Parallel For Each" doc:id="3eb19e3e-2890-4b87-af3e-0b4d5ceef772" collection="#[flatten(vars.allRequests)]" maxConcurrency="5">
			<scatter-gather doc:name="Scatter-Gather" doc:id="54176014-6541-4741-b48b-98809941f2a5" >
				<route >
					<http:request method="GET" doc:name="Retrieve Staffing Tasks" doc:id="5d496a30-a6f3-44d2-9bcc-0fa08f2637a0" url="#[p('staffing.api.base.url') ++ (payload.staffingTasksLink.href replace /[|]/ with(&quot;%7C&quot;))]" target="r_staffingTasks">
						<http:headers ><![CDATA[#[output application/java
---
{
	"Api-Key" : p('staffing.api.key')
}]]]></http:headers>
					</http:request>
					<choice doc:name="Choice" doc:id="b3f6e7f7-3509-41a5-9fcc-f8122be26e32" >
						<when expression="#[!isEmpty(vars.r_staffingTasks)]">
							<http:request method="GET" doc:name="Retrieve Vacancies" doc:id="ffb36526-f95d-4df8-893d-49963b8583b7" target="r_vacancies" url="#[p('staffing.api.base.url') ++ ((vars.r_staffingTasks.data[0].&quot;_links&quot; filter ((value, index) -&gt; value.rel == &quot;Vacancy&quot;))[0].href replace /[|]/ with(&quot;%7C&quot;))]">
				<http:headers><![CDATA[#[output application/java
---
{
	"Api-Key" : p('staffing.api.key')
}]]]></http:headers>
			</http:request>
							<choice doc:name="Choice" doc:id="14988ede-ea1e-4c3e-a0cc-6280339f5f67">
						<when expression="#[!isEmpty(vars.r_vacancies)]">
							<scatter-gather doc:name="Scatter-Gather" doc:id="fcafcefd-50cf-475a-95cd-7f938c1659cc">
						<route>
							<http:request method="GET" doc:name="Retrieve Vacancy Flag" doc:id="db984166-54e5-4e4c-bcb9-89822625ad67" url="#[p('staffing.api.base.url') ++ ((vars.r_vacancies.data[0].&quot;_links&quot; filter ((value, index) -&gt; value.rel == &quot;VacancyFlags&quot;))[0].href replace /[|]/ with(&quot;%7C&quot;))]" target="r_vacancyFlag">
								<http:headers><![CDATA[#[output application/java
---
{
	"Api-Key" : p('staffing.api.key')
}]]]></http:headers>
							</http:request>
						</route>
						<route>
							<http:request method="GET" doc:name="Retreive Announcement" doc:id="d22ddf68-c9ef-4aa2-89a3-8c2ce68ebd11" target="r_announcements" url="#[p('staffing.api.base.url') ++ ((vars.r_vacancies.data[0].&quot;_links&quot; filter ((value, index) -&gt; value.rel == &quot;Announcements&quot;))[0].href replace /[|]/ with(&quot;%7C&quot;))]">
								<http:headers><![CDATA[#[output application/java
---
{
	"Api-Key" : p('staffing.api.key')
}]]]></http:headers>
							</http:request>
											<choice doc:name="Choice" doc:id="def73417-8b4b-4a7a-a89b-735c46a0a2c6" >
												<when expression="#[!isEmpty(vars.r_announcements)]">
													<http:request method="GET" doc:name="Retrieve Customers" doc:id="d6b25de0-bd57-4b70-a1ab-ee76745eeb71" url="#[p('staffing.api.base.url') ++ ((vars.r_announcements.data[0].&quot;_links&quot; filter ((value, index) -&gt; value.rel == &quot;Customer&quot;))[0].href replace /[|]/ with(&quot;%7C&quot;))]" target="r_customer">
				<http:headers><![CDATA[#[output application/java
---
{
	"Api-Key" : p('staffing.api.key')
}]]]></http:headers>
			</http:request>
												</when>
												<otherwise >
													<logger level="INFO" doc:name="Logger" doc:id="9e354116-fa54-479d-9c15-7444a42838ca" message='#["Announcements are empty for request --- " ++ payload.requestNumber]'/>
												</otherwise>
											</choice>
						
</route>
						<route>
							<http:request method="GET" doc:name="Retrieve Offices" doc:id="9e7e9bc9-fe45-49f1-897d-d807056b994e" url="#[p('staffing.api.base.url') ++ ((vars.r_vacancies.data[0].&quot;_links&quot; filter ((value, index) -&gt; value.rel == &quot;Office&quot;))[0].href replace /[|]/ with(&quot;%7C&quot;))]" target="r_office">
								<http:headers><![CDATA[#[output application/java
---
{
	"Api-Key" : p('staffing.api.key')
}]]]></http:headers>
							</http:request>
						
</route>
					
</scatter-gather>
							<ee:transform doc:name="Transform Message" doc:id="a9caade7-3f27-4253-a0fb-0c00d3ac5b59">
								<ee:message>
								</ee:message>
						<ee:variables>
							<ee:set-variable variableName="r_vacancyCompletePayload"><![CDATA[%dw 2.0
output application/json
---
{
	(if (!isEmpty(vars.r_vacancies)) {
		"vacancyNumber": vars.r_vacancies.vacancyId,
		"vacancyPayPlanSeriesGrade": vars.r_vacancies.payPlanSeriesGrade,
		"jobTitle": vars.r_vacancies.jobTitle,
		"vacancyCreationDate": vars.r_vacancies.creationDate,
		"vacancyLastModifiedDateTime": vars.r_vacancies.lastModifiedDateTime,
		"vacancyStatus": vars.r_vacancies.vacancyStatus,
		"vacancyType": vars.r_vacancies.vacancyType,
		"officeName": vars.r_office.officeName
	} else {
		"vacancyNumber": null,
		"vacancyPayPlanSeriesGrade": null,
		"jobTitle": null,
		"vacancyCreationDate": null,
		"vacancyLastModifiedDateTime": null,
		"vacancyStatus": null,
		"vacancyType": null,
		"officeName": null
	}),
	"vacancyBargainingUnitPositionFlag": if (!isEmpty(vars.r_vacancyFlag)) vars.r_vacancyFlag[0].bargainingUnitPositionFlag else null,
	"announcementNumber": if (!isEmpty(vars.r_announcements)) vars.r_announcements.data[0].announcementNumber else null,
	"announcementStatus": if (!isEmpty(vars.r_announcements)) vars.r_announcements.data[0].announcementStatus else null,
	"externalContactEmail": if (!isEmpty(vars.r_announcements)) vars.r_announcements.data[0].externalContactEmail else null,
	"externalContactId": if (!isEmpty(vars.r_announcements)) vars.r_announcements.data[0].externalContactId else null,
	"externalContactName": if (!isEmpty(vars.r_announcements)) vars.r_announcements.data[0].externalContactName else null,
	"internalContactEmail": if (!isEmpty(vars.r_announcements)) vars.r_announcements.data[0].internalContactEmail else null,
	"internalContactId": if (!isEmpty(vars.r_announcements)) vars.r_announcements.data[0].internalContactId else null,
	"internalContactName": if (!isEmpty(vars.r_announcements)) vars.r_announcements.data[0].internalContactName else null,
	"announcementLastModifiedDateTime": if (!isEmpty(vars.r_announcements)) vars.r_announcements.data[0].lastModifiedDataTime else null,
	"USAJobsStatus": if (!isEmpty(vars.r_announcements)) vars.r_announcements.data[0].announcementStatus else null,
	"USAJobsLastModifiedDateTime": if (!isEmpty(vars.r_announcements)) vars.r_announcements.data[0].lastModifiedDateTime else null,
	"customerName": if (!isEmpty(vars.r_customer)) vars.r_customer.customerName else null,
	"customerExternalName": if (!isEmpty(vars.r_customer)) vars.r_customer.externalName else null
}]]></ee:set-variable>
						</ee:variables>
							</ee:transform>
						
</when>
						<otherwise>
							<logger level="INFO" doc:name="Logger" doc:id="a99d4ff3-886b-4fea-83bb-7d7111894013" message="Vacancy data is empty" />
						</otherwise>
					</choice>
						</when>
						<otherwise >
							<logger level="INFO" doc:name="Logger" doc:id="230258d8-3615-4459-b429-c18482511fe7" message='#["Staffing Tasks are empty for request --- " ++ payload.requestNumber]'/>
						</otherwise>
					</choice>
				</route>
				<route >
					<http:request method="GET" doc:name="Retreive Position Descriptions" doc:id="bec5e336-9cc1-4f7b-be0e-73568d356a3c" url="#[p('staffing.api.base.url') ++ (payload.requestPositionDescriptions.href replace /[|]/ with(&quot;%7C&quot;))]" target="r_requestPositionDescriptions">
				<http:headers><![CDATA[#[output application/java
---
{
	"Accept" : "*/*",
	"Accept-Encoding" : "gzip, deflate, br",
	"Api-Key" : p('staffing.api.key')
}]]]></http:headers>
			</http:request>
				</route>
			</scatter-gather>
			<ee:transform doc:name="Transform Message" doc:id="1e539c0a-61a3-4d95-a2a4-a93babf06a2d" >
				<ee:message >
					<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	"requestNumber": payload.requestNumber,
	"requestStatus": payload.requestStatus,
	"requestType": payload.requestType,
	"requestSource": payload.requestSource,
	"bargainingUnitPositionFlag": payload.bargainingUnitPositionFlag,
	"requesterEmail": payload.requesterEmail,
	"requesterName": payload.requesterName,
	"approverEmail": payload.approverEmail,
	"approverName": payload.approverName,
	"approvalDateTime": payload.approvalDateTime,
	"creationDateTime": payload.creationDateTime,
	"hiringValidationDate": payload.hiringValidationDate,
	"personnelActionDate": payload.personnelActionDate,
	"submissionDateTime": payload.submissionDateTime,
	"lastModifiedDateTime": payload.lastModifiedDateTime,
	"cancellationDate": payload.cancellationDate,	
	"payPlanSeriesGrade": vars.r_requestPositionDescriptions.positionDescriptionGrades[0].grade[0],
	"seriesTitle": vars.r_requestPositionDescriptions.positionDescriptionSeries[0].seriesTitle[0],
	(vars.r_vacancyCompletePayload)	
}]]></ee:set-payload>
				</ee:message>
			</ee:transform>
			<set-variable value="#[output application/json --- vars.fullRequestsPayload + payload]" doc:name="fullRequestsPayload" doc:id="5b719518-64e2-4f05-b5d9-700e071e4c69" variableName="fullRequestsPayload"/>
		</parallel-foreach>
		<logger level="INFO" doc:name="Logger" doc:id="e5eb4eb2-b222-46f2-a4d2-182c05b6db5d" message='#["Completed gathering full request payload --- " ++ sizeOf(vars.fullRequestsPayload)]'/>
		<ee:transform doc:name="Transform Message" doc:id="f95b34d1-4ee7-48b9-9e9a-8a942dc2f807" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
vars.fullRequestsPayload]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</sub-flow>
	<sub-flow name="vacancies-subFlow" doc:id="a203748c-aa83-4026-a29c-713c21d510ee" >
		<choice doc:name="Choice" doc:id="84988457-46c6-42f4-b840-a9fe7793390c" >
			<when expression='#[!isEmpty(payload) and !isEmpty(payload."paging"."next")]'>
				<set-variable value="#[output text/plain --- p('staffing.api.base.url') ++ payload.&quot;paging&quot;.&quot;next&quot;]" doc:name="vacanciesURL" doc:id="6636d0f2-b49b-45b0-b63a-3bdd7a8e63ee" variableName="vacanciesURL"/>
			</when>
			<otherwise >
				<set-variable value="#[p('staffing.api.base.url') ++ &quot;/api/vacancies?pageSize=&quot; ++ p('staffing.requests.page.size')]" doc:name="vacanciesURL" doc:id="0b01d63b-732d-4c26-a1c1-204d20027672" variableName="vacanciesURL"/>
			</otherwise>
		</choice>
		<http:request method="GET" doc:name="Retrieve Vacancies" doc:id="aedc5a7f-857e-45ce-a223-d92c733b6f1c" url="#[vars.vacanciesURL]" targetValue="#[output application/json --- payload]">
			<http:headers><![CDATA[#[output application/java
---
{
	"Api-Key" : p('staffing.api.key')
}]]]></http:headers>
		</http:request>
		<choice doc:name="Choice" doc:id="2cbc910d-984e-4ae7-969b-0e0f085595ca" >
			<when expression="#[(sizeOf((payload.&quot;data&quot; map (item, index) -&gt; {&#10;    &quot;ModifiedTime&quot;: item.dwLastModifiedDateTime&#10;} filterObject (((now() - item.dwLastModifiedDateTime) as Number { unit: &quot;hours&quot; }) &lt;= p('time.period.hrs'))) filter ($ != {}))) &gt;= p('staffing.requests.page.size')]">
				<ee:transform doc:name="Transform Message" doc:id="2cb3dfd8-1b21-478a-a08d-6f11a8252702" >
					<ee:message >
					</ee:message>
					<ee:variables >
						<ee:set-variable variableName="currentVacancies" ><![CDATA[%dw 2.0
output application/json
---
payload."data" map (item, index) -> {
	"vacancyNumber": item.vacancyId,
	"vacancyPayPlanSeriesGrade": item.payPlanSeriesGrade,
	"jobTitle": item.jobTitle,
	"vacancyCreationDate": item.creationDate,
	"vacancyLastModifiedDateTime": item.lastModifiedDateTime,
	"vacancyStatus": item.vacancyStatus,
	"vacancyType": item.vacancyType,
	"vacancyFlagLink": (item."_links" filter ((value, index) -> value.rel == "VacancyFlags"))[0],
	"officeLink": (item."_links" filter ((value, index) -> value.rel == "Office"))[0],
	"announcementsLink": (item."_links" filter ((value, index) -> value.rel == "Announcements"))[0],
	"staffingTasksLink": (item."_links" filter ((value, index) -> value.rel == "StaffingTasks"))[0]
}]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
				<set-variable value="#[output application/json --- vars.allVacancies + vars.currentVacancies]" doc:name="allVacancies" doc:id="138054b4-4e36-485a-bf34-09c9512e1ec8" variableName="allVacancies"/>
				<flow-ref doc:name="Flow Reference" doc:id="65c37fec-5f7f-473f-a911-099c05ce2c9f" name="vacancies-subFlow"/>
			</when>
			<otherwise >
				<ee:transform doc:name="Transform Message" doc:id="bb8e0fe9-77e0-46b3-85fd-f28676de37cb" >
					<ee:message >
					</ee:message>
					<ee:variables >
						<ee:set-variable variableName="currentVacancies" ><![CDATA[%dw 2.0
output application/json
---
(payload."data" map (item, index) -> {
	"vacancyNumber": item.vacancyId,
	"vacancyPayPlanSeriesGrade": item.payPlanSeriesGrade,
	"jobTitle": item.jobTitle,
	"vacancyCreationDate": item.creationDate,
	"vacancyLastModifiedDateTime": item.lastModifiedDateTime,
	"vacancyStatus": item.vacancyStatus,
	"vacancyType": item.vacancyType,
	"vacancyFlagLink": (item."_links" filter ((value, index) -> value.rel == "VacancyFlags"))[0],
	"officeLink": (item."_links" filter ((value, index) -> value.rel == "Office"))[0],
	"announcementsLink": (item."_links" filter ((value, index) -> value.rel == "Announcements"))[0],
	"staffingTasksLink": (item."_links" filter ((value, index) -> value.rel == "StaffingTasks"))[0]
} filterObject (((now() - item.dwLastModifiedDateTime) as Number { unit: "hours" }) <= p('time.period.hrs'))) filter ($ != {})]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
				<set-variable value="#[output application/json --- vars.allVacancies + vars.currentVacancies]" doc:name="allVacancies" doc:id="120465db-8020-40b2-905e-b37f2da74823" variableName="allVacancies"/>
			</otherwise>
		</choice>
		<ee:transform doc:name="Transform Message" doc:id="90d1629a-bf57-446e-a412-8c3ca2928353" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	"TotalVacanciesRetrieved": sizeOf(flatten(vars.allVacancies))
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</sub-flow>
	<sub-flow name="vacancies-reverse-subFlow" doc:id="1ac60500-3ef1-4ed1-958c-af35b55e25bd">
		<set-variable value="#[output application/json --- []]" doc:name="fullVacanciesPayload" doc:id="c0bfce51-766b-4de4-8549-3ffc62f9d206" variableName="fullVacanciesPayload"/>
		<parallel-foreach doc:name="Parallel For Each" doc:id="4a6acc23-dd48-4b8b-a00c-45c65f1915f5" collection="#[flatten(vars.allVacancies)]" maxConcurrency="5">
			<scatter-gather doc:name="Scatter-Gather" doc:id="cdfb25ac-0dc3-4ae5-8c4c-88691980dc5c" >
						<route>
							<http:request method="GET" doc:name="Retrieve Vacancy Flag" doc:id="483adce8-58f4-4b63-b0ad-7349863f751f" url="#[p('staffing.api.base.url') ++ (payload.vacancyFlagLink.href replace /[|]/ with(&quot;%7C&quot;))]" target="v_vacancyFlag">
								<http:headers><![CDATA[#[output application/java
---
{
	"Api-Key" : p('staffing.api.key')
}]]]></http:headers>
							</http:request>
						</route>
						<route>
							<http:request method="GET" doc:name="Retreive Announcement" doc:id="0b5d6f31-c7dd-4040-a234-0171c92ce088" target="v_announcement" url="#[p('staffing.api.base.url') ++ (payload.announcementsLink.href replace /[|]/ with(&quot;%7C&quot;))]">
								<http:headers><![CDATA[#[output application/java
---
{
	"Api-Key" : p('staffing.api.key')
}]]]></http:headers>
							</http:request>
					<choice doc:name="Choice" doc:id="c1efd9b2-1120-48bf-be1d-fd76f76a6f20" >
						<when expression="#[!isEmpty(vars.v_announcement)]">
							<http:request method="GET" doc:name="Retrieve Customer" doc:id="c0f3c2ec-c5fc-4ee1-b4ac-32fb4fc2e714" url="#[p('staffing.api.base.url') ++ ((vars.v_announcement.data[0].&quot;_links&quot; filter ((value, index) -&gt; value.rel == &quot;Customer&quot;))[0].href replace /[|]/ with(&quot;%7C&quot;))]" target="v_customer">
								<http:headers><![CDATA[#[output application/java
---
{
	"Api-Key" : p('staffing.api.key')
}]]]></http:headers>
							</http:request>
						</when>
						<otherwise >
							<logger level="INFO" doc:name="Logger" doc:id="3742795c-0b46-42ed-81cb-76f5697a3dc3" message='#["Request is empty for vacancy -- " ++ payload.vacancyNumber]'/>
						</otherwise>
					</choice>
						
</route>
						<route>
							<http:request method="GET" doc:name="Retrieve Office" doc:id="fbb17258-bb4d-4cdd-b5ec-257c5cd47789" url="#[p('staffing.api.base.url') ++ (payload.officeLink.href replace /[|]/ with(&quot;%7C&quot;))]" target="v_office">
								<http:headers><![CDATA[#[output application/java
---
{
	"Api-Key" : p('staffing.api.key')
}]]]></http:headers>
							</http:request>
						</route>
						<route>
							<http:request method="GET" doc:name="Retrieve Staffing Tasks" doc:id="3471e922-0c03-45a0-a224-e685fe3ca3ef" url="#[p('staffing.api.base.url') ++ (payload.staffingTasksLink.href replace /[|]/ with(&quot;%7C&quot;))]" target="v_staffingTasks">
						<http:headers ><![CDATA[#[output application/java
---
{
	"Api-Key" : p('staffing.api.key')
}]]]></http:headers>
					</http:request>
					<choice doc:name="Choice" doc:id="2a93023f-a122-4d5e-b6fd-8ad002d85e2d" >
						<when expression="#[!isEmpty(vars.v_staffingTasks)]">
							<http:request method="GET" doc:name="Retrieve Request" doc:id="98e34c48-21cb-4c55-a58c-4e09b816f57f" url="#[p('staffing.api.base.url') ++ ((vars.v_staffingTasks.data[0].&quot;_links&quot; filter ((value, index) -&gt; value.rel == &quot;Request&quot;))[0].href replace /[|]/ with(&quot;%7C&quot;))]" target="v_request">
								<http:headers><![CDATA[#[output application/java
---
{
	"Api-Key" : p('staffing.api.key')
}]]]></http:headers>
							</http:request>
							<choice doc:name="Choice" doc:id="3eb8b537-4f83-43c7-a4ef-80509cda14f4">
						<when expression="#[!isEmpty(vars.v_request)]">
							<http:request method="GET" doc:name="Retreive Position Descriptions" doc:id="5b43748e-7097-429c-82b2-e98a14205914" url="#[p('staffing.api.base.url') ++ ((vars.v_request.data[0].&quot;_links&quot; filter ((value, index) -&gt; value.rel == &quot;RequestPositionDescriptions&quot;))[0].href replace /[|]/ with(&quot;%7C&quot;))]" target="v_requestPositionDescriptions">
				<http:headers><![CDATA[#[output application/java
---
{
	"Accept" : "*/*",
	"Accept-Encoding" : "gzip, deflate, br",
	"Api-Key" : p('staffing.api.key')
}]]]></http:headers>
			</http:request>
						</when>
						<otherwise>
							<logger level="INFO" doc:name="Logger" doc:id="1dfa7315-e041-4c2f-8348-2b0baed2dbeb" message='#["Request is empty for vacancy -- " ++ payload.vacancyNumber]' />
						</otherwise>
					</choice>
						</when>
						<otherwise >
							<logger level="INFO" doc:name="Logger" doc:id="190a51c3-6228-4a8c-a4b8-bcff4bc2b27e" message='#["Request is empty for vacancy -- " ++ payload.vacancyNumber]'/>
						</otherwise>
					</choice>
						
</route>
			</scatter-gather>
			<ee:transform doc:name="Transform Message" doc:id="68ad8c11-bd70-4d7a-936f-46aeb6e749b8" >
				<ee:message >
					<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	(if (!isEmpty(vars.v_request)) {
		"requestNumber": vars.v_request.requestNumber,
		"requestStatus": vars.v_request.requestStatus,
		"requestType": vars.v_request.requestType,
		"requestSource": vars.v_request.requestSource,
		"bargainingUnitPositionFlag": vars.v_request.bargainingUnitPositionFlag,
		"requesterEmail": vars.v_request.requesterEmail,
		"requesterName": vars.v_request.requesterName,
		"approverEmail": vars.v_request.approverEmail,
		"approverName": vars.v_request.approverName,
		"approvalDateTime": vars.v_request.approvalDateTime,
		"creationDateTime": vars.v_request.creationDateTime,
		"hiringValidationDate": vars.v_request.hiringValidationDate,
		"personnelActionDate": vars.v_request.personnelActionDate,
		"submissionDateTime": vars.v_request.submissionDateTime,
		"lastModifiedDateTime": vars.v_request.lastModifiedDateTime,
		"cancellationDate": vars.v_request.cancellationDate		
	} else {
		"requestNumber": null,
		"requestStatus": null,
		"requestType": null,
		"requestSource": null,
		"bargainingUnitPositionFlag": null,
		"requesterEmail": null,
		"requesterName": null,
		"approverEmail": null,
		"approverName": null,
		"approvalDateTime": null,
		"creationDateTime": null,
		"hiringValidationDate": null,
		"personnelActionDate": null,
		"submissionDateTime": null,
		"lastModifiedDateTime": null,
		"cancellationDate": null				
	}),
	"vacancyNumber": payload.vacancyNumber,
	"vacancyPayPlanSeriesGrade":payload.vacancyPayPlanSeriesGrade,
	"jobTitle": payload.jobTitle,
	"vacancyCreationDate": payload.vacancyCreationDate,
	"vacancyLastModifiedDateTime": payload.vacancyLastModifiedDateTime,
	"vacancyStatus": payload.vacancyStatus,
	"vacancyType": payload.vacancyType,
	"officeName": vars.v_office.officeName,
	"vacancyBargainingUnitPositionFlag": if (!isEmpty(vars.v_vacancyFlag)) vars.vacancyFlag[0].bargainingUnitPositionFlag else null,
	"announcementNumber": if (!isEmpty(vars.v_announcement)) vars.v_announcement.data[0].announcementNumber else null,
	"announcementStatus": if (!isEmpty(vars.v_announcement)) vars.v_announcement.data[0].announcementStatus else null,
	"externalContactEmail": if (!isEmpty(vars.v_announcement)) vars.v_announcement.data[0].externalContactEmail else null,
	"externalContactId": if (!isEmpty(vars.v_announcement)) vars.v_announcement.data[0].externalContactId else null,
	"externalContactName": if (!isEmpty(vars.v_announcement)) vars.v_announcement.data[0].externalContactName else null,
	"internalContactEmail": if (!isEmpty(vars.v_announcement)) vars.v_announcement.data[0].internalContactEmail else null,
	"internalContactId": if (!isEmpty(vars.v_announcement)) vars.v_announcement.data[0].internalContactId else null,
	"internalContactName": if (!isEmpty(vars.v_announcement)) vars.v_announcement.data[0].internalContactName else null,
	"announcementLastModifiedDateTime": if (!isEmpty(vars.v_announcement)) vars.v_announcement.data[0].lastModifiedDataTime else null,
	"USAJobsStatus": if (!isEmpty(vars.v_announcement)) vars.v_announcement.data[0].announcementStatus else null,
	"USAJobsLastModifiedDateTime": if (!isEmpty(vars.v_announcement)) vars.v_announcement.data[0].lastModifiedDateTime else null,
	(if (!isEmpty(vars.v_request) and !isEmpty(vars.v_requestPositionDescriptions)) {
		"payPlanSeriesGrade": vars.v_requestPositionDescriptions[0].positionDescriptionGrades[0].grade,
		"seriesTitle": vars.v_requestPositionDescriptions[0].positionDescriptionSeries[0].seriesTitle		
	} else {
		"payPlanSeriesGrade": null,
		"seriesTitle": null
	}),
	"customerName": if (!isEmpty(vars.v_customer)) vars.v_customer.customerName else null,
	"customerExternalName": if (!isEmpty(vars.v_customer)) vars.v_customer.externalName else null
}]]></ee:set-payload>
				</ee:message>
			</ee:transform>
			<set-variable value="#[output application/json &#10;---&#10;vars.fullVacanciesPayload + payload]" doc:name="fullVacanciesPayload" doc:id="7f33d306-c4b4-4b41-b5f5-576747c81869" variableName="fullVacanciesPayload"/>
		</parallel-foreach>
		<logger level="INFO" doc:name="Logger" doc:id="7eef97d4-4e94-45ee-a6ba-e0f6ae8adcce" message='#["Completed gathering full vacancies payload --- " ++ sizeOf(vars.fullVacanciesPayload)]'/>
		<ee:transform doc:name="Transform Message" doc:id="cd935823-b7e8-487f-8659-bb3f2eef0889" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
vars.fullVacanciesPayload]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</sub-flow>
	<sub-flow name="announcements-subFlow" doc:id="69ee00b2-d879-4af5-84be-242af1037d2e" >
		<choice doc:name="Choice" doc:id="f0b5fe8a-14ed-4a32-bf03-b1c9959db6d4" >
			<when expression='#[!isEmpty(payload) and !isEmpty(payload."paging"."next")]'>
				<set-variable value="#[output text/plain --- p('staffing.api.base.url') ++ payload.&quot;paging&quot;.&quot;next&quot;]" doc:name="announcementsURL" doc:id="b717b174-1929-4ca0-bd86-1f2b4d260143" variableName="announcementsURL"/>
			</when>
			<otherwise >
				<set-variable value="#[p('staffing.api.base.url') ++ &quot;/api/announcements?pageSize=&quot; ++ p('staffing.requests.page.size')]" doc:name="announcementsURL" doc:id="6983c397-55fa-4aa7-8125-af2333ab9134" variableName="announcementsURL"/>
			</otherwise>
		</choice>
		<http:request method="GET" doc:name="Retrieve Announcements" doc:id="136bb4ef-659c-4890-a6e1-320f15058d85" url="#[vars.announcementsURL]" targetValue="#[output application/json --- payload]">
			<http:headers><![CDATA[#[output application/java
---
{
	"Api-Key" : p('staffing.api.key')
}]]]></http:headers>
		</http:request>
		<choice doc:name="Choice" doc:id="609ef786-f417-4e7f-a8a9-836fa9fab85e" >
			<when expression="#[(sizeOf((payload.&quot;data&quot; map (item, index) -&gt; {&#10;    &quot;ModifiedTime&quot;: item.dwLastModifiedDateTime&#10;} filterObject (((now() - item.dwLastModifiedDateTime) as Number { unit: &quot;hours&quot; }) &lt;= p('time.period.hrs'))) filter ($ != {}))) &gt;= p('staffing.requests.page.size')]">
				<ee:transform doc:name="Transform Message" doc:id="f586c9a8-c2c9-46a7-a586-3d54da53fe08" >
					<ee:message >
					</ee:message>
					<ee:variables >
						<ee:set-variable variableName="currentAnnouncements" ><![CDATA[%dw 2.0
output application/json
---
payload."data" map (item, index) -> {
	(if (!isEmpty(item)) {
		"announcementNumber": item.announcementNumber,
		"announcementStatus": item.announcementStatus,
		"externalContactEmail": item.externalContactEmail,
		"externalContactId": item.externalContactId,
		"externalContactName": item.externalContactName,
		"internalContactEmail": item.internalContactEmail,
		"internalContactId": item.internalContactId,
		"internalContactName": item.internalContactName,
		"announcementLastModifiedDateTime": item.lastModifiedDataTime,
		"USAJobsStatus": item.announcementStatus,
		"USAJobsLastModifiedDateTime": item.lastModifiedDateTime
	} else {
		"announcementNumber": null,
		"announcementStatus": null,
		"externalContactEmail": null,
		"externalContactId": null,
		"externalContactName": null,
		"internalContactEmail": null,
		"internalContactId": null,
		"internalContactName": null,
		"announcementLastModifiedDateTime": null,
		"USAJobsStatus": null,
		"USAJobsLastModifiedDateTime": null
	}),
	"vacancyLink": (item."_links" filter ((value, index) -> value.rel == "Vacancy"))[0],
	"customerLink": (item."_links" filter ((value, index) -> value.rel == "Customer"))[0]
}]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
				<set-variable value="#[output application/json --- vars.allAnnouncements + vars.currentAnnouncements]" doc:name="allAnnouncements" doc:id="05b0426a-99e7-49d5-91a0-2bbfd1bdd492" variableName="allAnnouncements"/>
				<flow-ref doc:name="Flow Reference" doc:id="372739e3-8374-4881-a68f-57feed80e746" name="announcements-subFlow"/>
			</when>
			<otherwise >
				<ee:transform doc:name="Transform Message" doc:id="79e4aed8-bf80-4b41-8d8f-533bc866b8d7" >
					<ee:message >
					</ee:message>
					<ee:variables >
						<ee:set-variable variableName="currentAnnouncements" ><![CDATA[%dw 2.0
output application/json
---
(payload."data" map (item, index) -> {
	(if (!isEmpty(item)) {
		"announcementNumber": item.announcementNumber,
		"announcementStatus": item.announcementStatus,
		"externalContactEmail": item.externalContactEmail,
		"externalContactId": item.externalContactId,
		"externalContactName": item.externalContactName,
		"internalContactEmail": item.internalContactEmail,
		"internalContactId": item.internalContactId,
		"internalContactName": item.internalContactName,
		"announcementLastModifiedDateTime": item.lastModifiedDataTime,
		"USAJobsStatus": item.announcementStatus,
		"USAJobsLastModifiedDateTime": item.lastModifiedDateTime
	} else {
		"announcementNumber": null,
		"announcementStatus": null,
		"externalContactEmail": null,
		"externalContactId": null,
		"externalContactName": null,
		"internalContactEmail": null,
		"internalContactId": null,
		"internalContactName": null,
		"announcementLastModifiedDateTime": null,
		"USAJobsStatus": null,
		"USAJobsLastModifiedDateTime": null
	}),
	"vacancyLink": (item."_links" filter ((value, index) -> value.rel == "Vacancy"))[0],
	"customerLink": (item."_links" filter ((value, index) -> value.rel == "Customer"))[0]
} filterObject (((now() - item.dwLastModifiedDateTime) as Number { unit: "hours" }) <= p('time.period.hrs'))) filter ($ != {})]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
				<set-variable value="#[output application/json --- vars.allAnnouncements + vars.currentAnnouncements]" doc:name="allAnnouncements" doc:id="25d3ec8b-4972-4682-bada-91519a2c8db2" variableName="allAnnouncements"/>
			</otherwise>
		</choice>
		<ee:transform doc:name="Transform Message" doc:id="84efe3ac-32cb-4507-b858-b0ff34468e59" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	"TotalAnnouncementsRetrieved": sizeOf(flatten(vars.allAnnouncements))
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</sub-flow>
	<sub-flow name="announcements-reverse-subFlow" doc:id="ebf32f67-024d-4f8b-bbce-532da6f18ed0" >
		<set-variable value="#[output application/json --- []]" doc:name="fullAnnouncementsPayload" doc:id="b2e2f863-eda6-4c3a-8a78-9f2bd999a72a" variableName="fullAnnouncementsPayload" mimeType="application/json"/>
		<foreach doc:name="For Each" doc:id="4f7f01d5-93ef-44eb-9859-7d4b45500023" collection="#[flatten(vars.allAnnouncements)]">
			<scatter-gather doc:name="Scatter-Gather" doc:id="78c44ec0-7eb9-4850-9a69-74c463af4ebe" >
						<route>
							<http:request method="GET" doc:name="Retrieve Vacancies" doc:id="6d39c1fa-7189-496f-b327-0f493affe641" target="a_vacancies" url="#[p('staffing.api.base.url') ++ (payload.vacancyLink.href replace /[|]/ with(&quot;%7C&quot;))]">
						<http:headers ><![CDATA[#[output application/java
---
{
	"Api-Key" : p('staffing.api.key')
}]]]></http:headers>
					</http:request>
					<choice doc:name="Choice" doc:id="013f967d-3ad9-4ffc-b486-04ab1da6e35b" >
						<when expression="#[!isEmpty(vars.a_vacancies)]">
							<scatter-gather doc:name="Scatter-Gather" doc:id="1c394466-d2ec-4c4c-807a-e82240cf5b06" >
								<route >
									<http:request method="GET" doc:name="Retrieve Vacancy Flag" doc:id="7a97f51a-6151-43f2-a901-4241cff588c9" url="#[p('staffing.api.base.url') ++ ((vars.a_vacancies.&quot;_links&quot; filter ((value, index) -&gt; value.rel == &quot;VacancyFlags&quot;))[0].href replace /[|]/ with(&quot;%7C&quot;))]" target="a_vacancyFlag">
								<http:headers><![CDATA[#[output application/java
---
{
	"Api-Key" : p('staffing.api.key')
}]]]></http:headers>
							</http:request>
								</route>
								<route >
									<http:request method="GET" doc:name="Retrieve Staffing Tasks" doc:id="5819c31b-2261-4bc1-bad3-ce550dbb7d46" target="a_staffingTasks" url="#[p('staffing.api.base.url') ++ ((vars.a_vacancies.&quot;_links&quot; filter ((value, index) -&gt; value.rel == &quot;StaffingTasks&quot;))[0].href replace /[|]/ with(&quot;%7C&quot;))]">
										<http:headers ><![CDATA[#[output application/java
---
{
	"Api-Key" : p('staffing.api.key')
}]]]></http:headers>
									</http:request>
									<choice doc:name="Choice" doc:id="010c86bf-fdae-4b50-b59c-71e0f9ae458e" >
										<when expression="#[!isEmpty(vars.a_staffingTasks)]">
											<http:request method="GET" doc:name="Retrieve Request" doc:id="073ecf9e-bfb2-4c72-bbb9-40e9c52daa60" url="#[p('staffing.api.base.url') ++ ((vars.a_staffingTasks.data[0].&quot;_links&quot; filter ((value, index) -&gt; value.rel == &quot;Request&quot;))[0].href replace /[|]/ with(&quot;%7C&quot;))]" target="a_request">
								<http:headers><![CDATA[#[output application/java
---
{
	"Api-Key" : p('staffing.api.key')
}]]]></http:headers>
							</http:request>
											<choice doc:name="Choice" doc:id="24d8d61f-622d-4e14-a2bd-1d9e7c907026">
										<when expression="#[!isEmpty(vars.a_request)]">
											<http:request method="GET" doc:name="Retreive Position Descriptions" doc:id="f4cd539f-ec95-487e-9bcd-3fac9cbf83d2" url="#[p('staffing.api.base.url') ++ ((vars.a_request.&quot;_links&quot; filter ((value, index) -&gt; value.rel == &quot;RequestPositionDescriptions&quot;))[0].href replace /[|]/ with(&quot;%7C&quot;))]" target="a_requestPositionDescriptions">
				<http:headers><![CDATA[#[output application/java
---
{
	"Accept" : "*/*",
	"Accept-Encoding" : "gzip, deflate, br",
	"Api-Key" : p('staffing.api.key')
}]]]></http:headers>
			</http:request>
										</when>
										<otherwise>
											<logger level="INFO" doc:name="Logger" doc:id="f1ca331c-4bc4-48ff-9925-e104e3d297e5" message='#["Requests not found for announcement --- " ++ payload.announcementNumber]' />
										</otherwise>
									</choice>
										</when>
										<otherwise >
											<logger level="INFO" doc:name="Logger" doc:id="cc7a3160-1ce0-45cc-90a4-022bf309041a" message='#["Staffing Tasks not found for announcement --- " ++ payload.announcementNumber]'/>
										</otherwise>
									</choice>
								</route>
								<route >
									<http:request method="GET" doc:name="Retrieve Office" doc:id="65768f50-ca0a-4651-a338-e4f6a1d0146b" url="#[p('staffing.api.base.url') ++ ((vars.a_vacancies.&quot;_links&quot; filter ((value, index) -&gt; value.rel == &quot;Office&quot;))[0].href replace /[|]/ with(&quot;%7C&quot;))]" target="a_office">
								<http:headers><![CDATA[#[output application/java
---
{
	"Api-Key" : p('staffing.api.key')
}]]]></http:headers>
							</http:request>
								</route>
							</scatter-gather>
						</when>
						<otherwise >
							<logger level="INFO" doc:name="Logger" doc:id="c7211d9f-bd79-4028-8fc9-38f8b0131885" message='#["Vacancies are empty for the given announcement --- " ++ payload.announcementNumber]'/>
						</otherwise>
					</choice>
					<ee:transform doc:name="Transform Message" doc:id="ee6315f8-657d-4e77-a158-849853d3fabb">
								<ee:message>
								</ee:message>
						<ee:variables >
							<ee:set-variable variableName="a_vacancyCompletePayload" ><![CDATA[%dw 2.0
output application/json
---
{
	(if (!isEmpty(vars.a_request)) {
		"requestNumber": vars.a_request.requestNumber,
		"requestStatus": vars.a_request.requestStatus,
		"requestType": vars.a_request.requestType,
		"requestSource": vars.a_request.requestSource,
		"bargainingUnitPositionFlag": vars.a_request.bargainingUnitPositionFlag,
		"requesterEmail": vars.a_request.requesterEmail,
		"requesterName": vars.a_request.requesterName,
		"approverEmail": vars.a_request.approverEmail,
		"approverName": vars.a_request.approverName,
		"approvalDateTime": vars.a_request.approvalDateTime,
		"creationDateTime": vars.a_request.creationDateTime,
		"hiringValidationDate": vars.a_request.hiringValidationDate,
		"personnelActionDate": vars.a_request.personnelActionDate,
		"submissionDateTime": vars.a_request.submissionDateTime,
		"lastModifiedDateTime": vars.a_request.lastModifiedDateTime,
		"cancellationDate": vars.a_request.cancellationDate		
	} else {
		"requestNumber": null,
		"requestStatus": null,
		"requestType": null,
		"requestSource": null,
		"bargainingUnitPositionFlag": null,
		"requesterEmail": null,
		"requesterName": null,
		"approverEmail": null,
		"approverName": null,
		"approvalDateTime": null,
		"creationDateTime": null,
		"hiringValidationDate": null,
		"personnelActionDate": null,
		"submissionDateTime": null,
		"lastModifiedDateTime": null,
		"cancellationDate": null
	}),
	(if (!isEmpty(vars.a_office)) {
		"officeName": vars.a_office.officeName,
	} else {
		"officeName": null,
	}),
	(if (!isEmpty(vars.a_request) and !isEmpty(vars.a_requestPositionDescriptions)) {
		"payPlanSeriesGrade": vars.a_requestPositionDescriptions[0].positionDescriptionGrades[0].grade,
		"seriesTitle": vars.a_requestPositionDescriptions[0].positionDescriptionSeries[0].seriesTitle		
	} else {
		"payPlanSeriesGrade": null,
		"seriesTitle": null		
	}),
	"vacancyNumber": vars.a_vacancies.vacancyId,
	"vacancyPayPlanSeriesGrade": vars.a_vacancies.payPlanSeriesGrade,
	"jobTitle": vars.a_vacancies.jobTitle,
	"vacancyCreationDate": vars.a_vacancies.creationDate,
	"vacancyLastModifiedDateTime": vars.a_vacancies.lastModifiedDateTime,
	"vacancyStatus": vars.a_vacancies.vacancyStatus,
	"vacancyType": vars.a_vacancies.vacancyType,
	"vacancyBargainingUnitPositionFlag": if (!isEmpty(vars.a_vacancyFlag)) vars.a_vacancyFlag[0].bargainingUnitPositionFlag else null
}]]></ee:set-variable>
						</ee:variables>
					
</ee:transform>
						
</route>
						<route>
							<http:request method="GET" doc:name="Retrieve Customer" doc:id="1cd9421b-6c14-4261-bb59-5f6e6891cf15" url="#[p('staffing.api.base.url') ++ (payload.customerLink.href replace /[|]/ with(&quot;%7C&quot;))]" target="a_customer">
								<http:headers><![CDATA[#[output application/java
---
{
	"Api-Key" : p('staffing.api.key')
}]]]></http:headers>
							</http:request>
						</route>
			
</scatter-gather>
			<ee:transform doc:name="Transform Message" doc:id="c151dafe-f18b-4e1e-b7ab-d43475994366" >
				<ee:message >
					<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	(vars.a_vacancyCompletePayload),
	"announcementNumber": payload.announcementNumber,
	"announcementStatus": payload.announcementStatus,
	"externalContactEmail": payload.externalContactEmail,
	"externalContactId": payload.externalContactId,
	"externalContactName": payload.externalContactName,
	"internalContactEmail": payload.internalContactEmail,
	"internalContactId": payload.internalContactId,
	"internalContactName": payload.internalContactName,
	"announcementLastModifiedDateTime": payload.lastModifiedDataTime,
	"USAJobsStatus": payload.announcementStatus,
	"USAJobsLastModifiedDateTime": payload.lastModifiedDateTime,
	"customerName": vars.a_customer.customerName,
	"customerExternalName": vars.a_customer.externalName
}]]></ee:set-payload>
				</ee:message>
			</ee:transform>
			<set-variable value="#[output application/json &#10;---&#10;vars.fullAnnouncementsPayload + payload]" doc:name="fullAnnouncementsPayload" doc:id="0a5c2ecf-870d-47bc-bbf2-4996600da621" variableName="fullAnnouncementsPayload"/>
		</foreach>
		<logger level="INFO" doc:name="Logger" doc:id="314a0750-4d05-4a0d-a638-6755bf62954a" message='#["Completed gathering full annoncements payload --- " ++ sizeOf(vars.fullAnnouncementsPayload)]'/>
		<ee:transform doc:name="Transform Message" doc:id="ccfae931-bf09-4759-8d48-ebf6f8d22ab7" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
vars.fullAnnouncementsPayload]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</sub-flow>
	<sub-flow name="offices-subFlow" doc:id="c1e1195f-d991-4d59-9996-7f0d670a2ee7" >
		<choice doc:name="Choice" doc:id="1a0ffb2f-3430-4202-84da-fcf042725140">
			<when expression='#[!isEmpty(payload) and !isEmpty(payload."paging"."next")]'>
				<set-variable value="#[output text/plain --- p('staffing.api.base.url') ++ payload.&quot;paging&quot;.&quot;next&quot;]" doc:name="officesURL" doc:id="9e911c97-4614-4296-ad0c-1066a11391af" variableName="officesURL" />
			</when>
			<otherwise>
				<set-variable value="#[p('staffing.api.base.url') ++ &quot;/api/offices?pageSize=&quot; ++ p('offices.page.size')]" doc:name="officesURL" doc:id="afe605e2-1415-446e-bba1-8708ee9eb573" variableName="officesURL" />
			</otherwise>
		</choice>
		<http:request method="GET" doc:name="Retrieve Offices" doc:id="15c53433-5d6b-4b39-81cf-958c79df2f76" url="#[vars.officesURL]" targetValue="#[output application/json --- payload]">
			<http:headers><![CDATA[#[output application/java
---
{
	"Api-Key" : p('staffing.api.key')
}]]]></http:headers>
		</http:request>
		<choice doc:name="Choice" doc:id="4249e012-7443-4b85-a355-957c31acfd88" >
			<when expression="#[(sizeOf((payload.&quot;data&quot; map (item, index) -&gt; {&#10;    &quot;ModifiedTime&quot;: item.dwLastModifiedDateTime&#10;} filterObject (((now() - item.dwLastModifiedDateTime) as Number { unit: &quot;hours&quot; }) &lt;= p('time.period.hrs'))) filter ($ != {}))) &gt;= p('offices.page.size')]">
				<ee:transform doc:name="Transform Message" doc:id="9e834d22-2887-4adf-af29-ae17d0a2d4a0" >
					<ee:message >
					</ee:message>
					<ee:variables >
						<ee:set-variable variableName="currentOffices" ><![CDATA[%dw 2.0
output application/json
---
payload."data" map (item, index) -> {
	"officeName": vars.office.officeName,
	"vacanciesLink": (item."_links" filter ((value, index) -> value.rel == "Vacancies"))[0],
	"announcementsLink": (item."_links" filter ((value, index) -> value.rel == "Announcements"))[0],
	"customersLink": (item."_links" filter ((value, index) -> value.rel == "Customers"))[0]
}]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
				<set-variable value="#[output application/json --- vars.allOffices + vars.currentOffices]" doc:name="allOffices" doc:id="65d02d57-92fe-4455-a283-b1bd100a7bfe" variableName="allOffices"/>
				<flow-ref doc:name="Flow Reference" doc:id="b8439e51-65ba-427f-bb45-9753c350e4df" name="offices-subFlow"/>
			</when>
			<otherwise >
				<ee:transform doc:name="Transform Message" doc:id="3f688553-7389-4e13-8cc9-179ea50b086a" >
					<ee:message >
					</ee:message>
					<ee:variables >
						<ee:set-variable variableName="currentOffices" ><![CDATA[%dw 2.0
output application/json
---
(payload."data" map (item, index) -> {
	"officeName": vars.office.officeName,
	"vacanciesLink": (item."_links" filter ((value, index) -> value.rel == "Vacancies"))[0],
	"announcementsLink": (item."_links" filter ((value, index) -> value.rel == "Announcements"))[0],
	"customersLink": (item."_links" filter ((value, index) -> value.rel == "Customers"))[0]
} filterObject (daysBetween(item.dwLastModifiedDateTime, now()) <= 1)) filter ($ != {})]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
				<set-variable value="#[output application/json --- vars.allOffices + vars.currentOffices]" doc:name="allOffices" doc:id="7c8fc542-c18c-4e4c-98e1-f2f7a99b592b" variableName="allOffices"/>
			</otherwise>
		</choice>
		<ee:transform doc:name="Transform Message" doc:id="4917206c-14dc-47a5-94e8-414eb3c41239" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	"TotalOfficesRetrieved": sizeOf(flatten(vars.allOffices))
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</sub-flow>
	<sub-flow name="customers-subFlow" doc:id="8e4c549d-f480-450a-8725-d0d6b09af9e7" >
		<choice doc:name="Choice" doc:id="068573b1-99c7-4d6b-8fdc-2697edbfa4b3">
			<when expression='#[!isEmpty(payload) and !isEmpty(payload."paging"."next")]'>
				<set-variable value="#[output text/plain --- p('staffing.api.base.url') ++ payload.&quot;paging&quot;.&quot;next&quot;]" doc:name="customersURL" doc:id="ff793974-63e8-4919-9444-865ee15ed7c8" variableName="customersURL" />
			</when>
			<otherwise>
				<set-variable value="#[p('staffing.api.base.url') ++ &quot;/api/customers?pageSize=&quot; ++ p('customers.page.size')]" doc:name="customersURL" doc:id="c9b70f82-4f5f-48e2-ba39-b788ae1ecba0" variableName="customersURL" />
			</otherwise>
		</choice>
		<http:request method="GET" doc:name="Retrieve Customers" doc:id="16e1d729-76c0-4f13-8ba5-cb4d04186df3" url="#[vars.customersURL]" targetValue="#[output application/json --- payload]">
			<http:headers><![CDATA[#[output application/java
---
{
	"Api-Key" : p('staffing.api.key')
}]]]></http:headers>
		</http:request>
		<choice doc:name="Choice" doc:id="ffa8c1b5-dab5-4a92-9134-f3323320a14d" >
			<when expression="#[(sizeOf((payload.&quot;data&quot; map (item, index) -&gt; {&#10;    &quot;ModifiedTime&quot;: item.dwLastModifiedDateTime&#10;} filterObject (((now() - item.dwLastModifiedDateTime) as Number { unit: &quot;hours&quot; }) &lt;= p('time.period.hrs'))) filter ($ != {}))) &gt;= p('customers.page.size')]">
				<ee:transform doc:name="Transform Message" doc:id="41785c30-e3a9-4223-95d7-e159549ba188" >
					<ee:message >
					</ee:message>
					<ee:variables >
						<ee:set-variable variableName="currentCustomers" ><![CDATA[%dw 2.0
output application/json
---
payload."data" map (item, index) -> {
	"customerName": vars.customer.customerName,
	"customerExternalName": vars.customer.externalName,
	"vacanciesLink": (item."_links" filter ((value, index) -> value.rel == "Vacancies"))[0],
	"announcementsLink": (item."_links" filter ((value, index) -> value.rel == "Announcements"))[0],
	"officesLink": (item."_links" filter ((value, index) -> value.rel == "Offices"))[0],
	"requestsLink": (item."_links" filter ((value, index) -> value.rel == "Requests"))[0]
}]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
				<set-variable value="#[output application/json --- vars.allCustomers + vars.currentCustomers]" doc:name="allCustomers" doc:id="2cec6a57-cf45-46cf-ac0d-492038fef8ab" variableName="allCustomers"/>
				<flow-ref doc:name="Flow Reference" doc:id="2e5fe470-e137-44a5-8659-4032732efc1a" name="customers-subFlow"/>
			</when>
			<otherwise >
				<ee:transform doc:name="Transform Message" doc:id="e7205d2d-3117-4b29-9448-96e3fd7124e3" >
					<ee:message >
					</ee:message>
					<ee:variables >
						<ee:set-variable variableName="currentCustomers" ><![CDATA[%dw 2.0
output application/json
---
(payload."data" map (item, index) -> {
	"officeName": vars.office.officeName,
	"vacanciesLink": (item."_links" filter ((value, index) -> value.rel == "Vacancies"))[0],
	"announcementsLink": (item."_links" filter ((value, index) -> value.rel == "Announcements"))[0],
	"customersLink": (item."_links" filter ((value, index) -> value.rel == "Customers"))[0]
} filterObject (daysBetween(item.dwLastModifiedDateTime, now()) <= 1)) filter ($ != {})]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
				<set-variable value="#[output application/json --- vars.allCustomers + vars.currentCustomers]" doc:name="allCustomers" doc:id="fdc3d6c6-9cf0-4a3d-b33c-0e913a9e7da2" variableName="allCustomers"/>
			</otherwise>
		</choice>
		<ee:transform doc:name="Transform Message" doc:id="6c764139-ec23-4bc9-b96f-a315cba04ac9" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	"TotalCustomersRetrieved": sizeOf(flatten(vars.allCustomers))
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</sub-flow>
</mule>
